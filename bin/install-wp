#!/bin/bash

function is_db_up() {
    RESULT=`mysql -h ${WP_DB_HOST%:*} \
                  -P${WP_DB_HOST#*:} \
                  -u ${WP_DB_USER} \
                  -p${WP_DB_PASSWORD} \
                  --skip-column-names \
                  -e "SHOW DATABASES LIKE '${WP_DB_NAME}'" \
                  2>/dev/null`

    if [ "$RESULT" == "${WP_DB_NAME}" ]; then
        return 0
    else
        return 1
    fi
}

function test_db_command {
	mysql -h ${WP_DB_HOST%:*} \
          -P${WP_DB_HOST#*:} \
          -uroot \
          -p${WP_DB_PASSWORD} \
          -e "$1"
}

until is_db_up; do
   echo "Waiting for database to become available..."
   sleep 5
done

echo "Database is available. Continuing..."

# Checkout/update WordPress
echo
cd /var/www/html
if [ -d "wordpress/.git" ]; then
	echo "Updating WordPress..."
	git -C wordpress pull
else
    echo "Cloning WordPress Core (could take several minutes)..."
	git clone ${WP_GIT_URL} wordpress
fi
cd - >/dev/null

# Copy config files
echo
echo "Adding WordPress Configs..."
cp /var/www/html/wp-config/wp-config.php /var/www/html/wordpress/wp-config.php
cp /var/www/html/wp-config/wp-tests-config.php /var/www/html/wordpress/wp-tests-config.php

# Install Core
echo
echo "Installing WordPress..."
if ! $(wp core is-installed --allow-root --path=/var/www/html/wordpress/src); then
    wp core install \
        --allow-root \
        --path=/var/www/html/wordpress/src \
        --url=${WP_DOMAIN} \
        --title="${WP_TITLE}" \
        --admin_user=${WP_ADMIN_USER} \
        --admin_password=${WP_ADMIN_PASSWORD} \
        --admin_email=${WP_ADMIN_EMAIL} \
        --skip-email
fi

# Ensure the plugin and theme directories exist
mkdir -p /var/www/html/wp-content/themes
mkdir -p /var/www/html/wp-content/plugins

# Checkout/update default theme
echo
if [ ! ${WP_THEME_NAME} ]; then
    echo "You must add the 'WP_THEME_NAME' environment variable to the docker php service..."
else
    if [ ${WP_THEME_GIT_URL} ]; then
        if [ -d "../wp-content/themes/${WP_THEME_NAME}" ]; then
            echo "Updating theme..."
            git -C ../wp-content/themes/${WP_THEME_NAME} pull
        else
            echo "Cloning theme..."
            git clone ${WP_THEME_GIT_URL} ../wp-content/themes/${WP_THEME_NAME}
        fi
    elif [ ${WP_THEME_SVN_URL} ]; then
        if [ -d "../wp-content/themes/${WP_THEME_NAME}" ]; then
            echo "Updating theme..."
            svn up ../wp-content/themes/${WP_THEME_NAME}
        else
            echo "Checking out theme..."
            svn co ${WP_THEME_SVN_URL} ../wp-content/themes/${WP_THEME_NAME}
        fi
    elif [ ${WP_THEME_ZIP_URL} ]; then
        wp theme install ${WP_THEME_ZIP_URL} --allow-root
    elif [ ${WP_THEME_CLI} ]; then
        wp theme install ${WP_THEME_NAME} --allow-root
    elif [ ! -d "../wp-content/themes/${WP_THEME_NAME}" ]; then
        echo "Could not install theme..."
    fi
    wp theme activate ${WP_THEME_NAME} --allow-root
fi

echo
echo "Installing Plugins..."

cd /var/www/html/wp-content
composer install
cd - >/dev/null

echo
echo "Activating Plugins..."

wp plugin activate \
	query-monitor \
	--allow-root

echo
echo "Creating Tests Database..."
test_db_command "CREATE DATABASE IF NOT EXISTS ${WP_TESTS_DB_NAME};"

echo
echo "Granting User Privileges..."
test_db_command "GRANT ALL PRIVILEGES ON ${WP_TESTS_DB_NAME}.* TO '${WP_TESTS_DB_USER}'@'%' IDENTIFIED BY '${WP_TESTS_DB_PASSWORD}';"

echo
echo "Flushing Privileges..."
test_db_command "FLUSH PRIVILEGES;"

echo
echo "Done!"

echo
grep "wp.local" /etc/hosts > /dev/null || echo 'Be sure to add `127.0.0.1 wp.local` to your /etc/hosts file'

php-fpm -F
